
* pushS, pushN: Look at ways to push more than one element per thread.
  Do not push adjacent elements! 
    
* Get all example files up to date with current implementation.

* See if there is something awkward with mapG and number of threads 
  when it comes to writing the global array. 

* See what the state of the CSE is. Does it work in this new setting? 
  Or is a lot of coding needed? 

* <DONE>: Investigate why __attribute__ might fail (on windows) 
  you need to do __declspec(align(16))

* <DONE>: Investigate why a size is needed on shared memory array declarations (on windows) 
  The programmers manual specifies that you should not be required to 
  specify a size if you do: 
   extern __shared__ type name[]; 
  The size is given later in the execution configuration:
  func<<<blocks, threads, sharedBytes>>>(parameters); 


* See what needs to be done to implement global kernels that use 
  shared memory for caching. This does not as I can see be easily 
  fit into how I manage memory currently. 
  One big difference is that this kernel will not "know" how much 
  shared memory it needs. It will depend on its execution configuration. 
  Currently kernels that use shared memory are of fixed sizes and 
  know how much memory to use.

* See if special global kernels that cache in shared memory once 
  and they directly outputs to global memory can be implemented in 
  a way that does not require a __syncthreads(); 
 
* __threadfence and __threadfence_block: Look at what powers these 
  two functions may bring to our new global kernels. 

* May need to use __threadfence and __syncthreads in some combination 
  to make atomicForce really work as it should. 

  - threadfence: 
    The thread that calls threadfence is stalled until all its 
    prior writes to global and local memory is visible to all(globally) 
    other threads.  

  - syncthreads:    
    waits until all threads in a block reaches this point and 
    also until all writes to memory is visible by all those threads. 

  
  I think threadfence is too weak to implement atomicForce.
